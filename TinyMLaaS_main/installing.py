# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/installing.ipynb.

# %% auto 0
__all__ = ['upload_image_to_dockerhub', 'InstallerImageBuilder',
           'ArduinoNano33BLE_Installer', 'ArducamPico4ML_Installer']

# %% ../nbs/installing.ipynb 1
import shutil
import json
import docker
import os

# %% ../nbs/installing.ipynb 2


def upload_image_to_dockerhub(image_tag: str, dockerhub_user=None, dockerhub_pass=None):
    "Uploads a docker image to dockerhub. If username or password is not given, environmental variables DOCKERHUB_USER and DOCKERHUB_PASSWORD will be used instead"
    if not dockerhub_user or not dockerhub_pass:
        dockerhub_user = os.getenv("DOCKERHUB_USER")
        dockerhub_pass = os.getenv("DOCKERHUB_PASSWORD")
        if not dockerhub_user:
            raise Exception("DOCKERHUB_USER environment variable not defined")
        if not dockerhub_pass:
            raise Exception(
                "DOCKERHUB_PASSWORD environment variable not defined")

    dockerhub_tag = dockerhub_user+'/'+image_tag+":latest"
    client = docker.from_env()
    client.login(dockerhub_user, dockerhub_pass)
    if not docker.APIClient().tag(image_tag, dockerhub_tag):
        raise Exception(f"Failed to tag image: {image_tag} => {dockerhub_tag}")
    return client.api.push(dockerhub_tag)

# %% ../nbs/installing.ipynb 3


class InstallerImageBuilder:
    "Base class for device specific installers"

    def __init__(self):
        self.DOCKERFILE_DIR = ""  # Path to directory containing the device's dockerfile
        self.DOCKER_IMG = ""  # Name of docker image to produce
        self.MODEL_DESTINATION = ""  # Path where the model file is copied to

    def compile(self, model_path: str):
        "Compiles arduino sketch in docker, using model file at `model_path` in local filesystem"
        shutil.copyfile(model_path+"/model.cc", self.MODEL_DESTINATION)
        client = docker.from_env()
        image = client.images.build(
            path=self.DOCKERFILE_DIR, tag=self.DOCKER_IMG)

    def upload(self, dockerhub_user=None, dockerhub_pass=None):
        "Uploads compiled application inside docker image to dockerhub"
        return upload_image_to_dockerhub(self.DOCKER_IMG, dockerhub_user, dockerhub_pass)

# %% ../nbs/installing.ipynb 4


class ArduinoNano33BLE_Installer(InstallerImageBuilder):
    def __init__(self):
        self.DOCKERFILE_DIR = "arduino"
        self.MODEL_DESTINATION = "arduino/template/person_detect_model_data.cpp"
        self.DOCKER_IMG = "nano33ble"

    def list_ports(self):
        "Returns a list of ports of connected devices (Unused)"
        ports = []
        cmd_output = subprocess.run(
            ['docker run --privileged nano33ble board list --format=json'], shell=True, capture_output=True).stdout
        result = json.loads(cmd_output.decode("ascii"))
        for row in result:
            ports.append(row["port"]["address"])
        return ports

# %% ../nbs/installing.ipynb 5


class ArducamPico4ML_Installer(InstallerImageBuilder):
    def __init__(self):
        self.DOCKER_IMG = "pico"
        self.DOCKERFILE_DIR = "rpi-pico"
        self.MODEL_DESTINATION = self.DOCKERFILE_DIR + "/model.cc"
